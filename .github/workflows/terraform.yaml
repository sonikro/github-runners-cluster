name: Terraform
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - .gitignore
      - .github/workflows/destroy**
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - .gitignore
      - .github/workflows/destroy**

jobs:
  terraform:
    name: Terraform CI
    runs-on: ubuntu-latest
    container: hashicorp/terraform:1.2.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Format
        id: fmt-cluster
        run: terraform fmt -check

      - name: Init
        id: init-cluster
        run: terraform init

      - name: Validate
        id: validate-cluster
        run: terraform validate -no-color

      - name: Plan
        id: plan-cluster
        if: github.event_name == 'pull_request'
        run: |
          PLAN=$(terraform plan -no-color -input=false)
          SCRIPT_RC=$?
          echo "::set-output name=cluster_plan::${PLAN//$'\n'/\\n}"
          exit $SCRIPT_RC
        continue-on-error: true

      - name: Cluster Plan for Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform plan -no-color -input=false --out plan-cluster.json

      - name: Stash Plan for Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: plan-cluster
          path: plan-cluster.json
      

      - name: Format
        id: fmt-setup
        working-directory: setup
        run: terraform fmt -check

      - name: Init
        id: init-setup
        working-directory: setup
        run: terraform init

      - name: Validate
        id: validate-setup
        working-directory: setup
        run: terraform validate -no-color

      - name: Plan
        id: plan-setup
        working-directory: setup
        if: github.event_name == 'pull_request'
        run: |
          PLAN=$(terraform plan -no-color -input=false)
          SCRIPT_RC=$?
          echo "::set-output name=setup_plan::${PLAN//$'\n'/\\n}"
          exit $SCRIPT_RC
        continue-on-error: true

      - name: Setup Plan for Deploy
        working-directory: setup
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform plan -no-color -input=false --out plan-setup.json

      - name: Stash Plan for Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: plan-setup
          path: plan-setup.json

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          CLUSTER_PLAN: "terraform\n${{ steps.plan-cluster.outputs.cluster_plan }}"
          SETUP_PLAN: "terraform\n${{ steps.plan-setup.outputs.setup_plan }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### [CLUSTER] Terraform Format and Style üñå\`${{ steps.fmt-cluster.outcome }}\`
            #### [CLUSTER] Terraform Initialization ‚öôÔ∏è\`${{ steps.init-cluster.outcome }}\`
            #### [CLUSTER] Terraform Plan üìñ\`${{ steps.plan-cluster.outcome }}\`
            #### [CLUSTER] Terraform Validation ü§ñ\`${{ steps.validate-cluster.outcome }}\`

            <details><summary>Show Plan for Cluster</summary>

            \`\`\`\n
            ${process.env.CLUSTER_PLAN.replace(/\\n/g, '\n')}
            \`\`\`

            </details>

            #### [SETUP] Terraform Format and Style üñå\`${{ steps.fmt-setup.outcome }}\`
            #### [SETUP] Terraform Initialization ‚öôÔ∏è\`${{ steps.init-setup.outcome }}\`
            #### [SETUP] Terraform Plan üìñ\`${{ steps.plan-setup.outcome }}\`
            #### [SETUP] Terraform Validation ü§ñ\`${{ steps.validate-setup.outcome }}\`


            <details><summary>Show Plan for Setup</summary>

            \`\`\`\n
            ${process.env.SETUP_PLAN.replace(/\\n/g, '\n')}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Cluster Plan Status
        if: steps.plan-cluster.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Setup Plan Status
        if: steps.plan-setup.outcome == 'failure'
        run: exit 1

  deploy-cluster:
    needs: terraform
    name: Deploy Cluster
    environment: development
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    container: hashicorp/terraform:1.2.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: plan-cluster

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Init
        run: terraform init

      - name: Apply
        run: terraform apply -auto-approve -input=false plan-cluster.json
  
  setup-cluster:
    needs: deploy-cluster
    name: Setup Cluster
    environment: development
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    container: hashicorp/terraform:1.2.0
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: plan-setup

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Init
        working-directory: setup
        run: terraform init

      - name: Setup Charts
        working-directory: setup
        run: terraform apply -auto-approve -input=false plan-setup.json
